@use 'src/scss/base' as *;

.group-tab-common {
  $root: &;

  @mixin size-s {
    font-size: 1.6rem;
    min-height: 5.1rem;
    padding: 1.3rem 2rem;
    grid-gap: 0.8rem;

    svg {
      width: 1.8rem;
      height: 1.8rem;
    }

    #{$root}__item-count {
      height: 1.9rem;
      min-width: 1.9rem;
      font-size: 1.2rem;
    }
  }

  @mixin size-m {
    font-size: 1.8rem;
    min-height: 5.2rem;
    padding: 1.2rem 2rem;
    grid-gap: 0.8rem;

    svg {
      width: 1.8rem;
      height: 1.8rem;
    }

    #{$root}__item-count {
      height: 1.9rem;
      min-width: 1.9rem;
      font-size: 1.2rem;
    }
  }

  @mixin size-l {
    font-size: 2.2rem;
    min-height: 6.8rem;
    padding: 1.8rem 2.4rem;
    grid-gap: 1.2rem;

    svg {
      width: 2.2rem;
      height: 2.2rem;
    }

    #{$root}__item-count {
      height: 2.3rem;
      min-width: 2.3rem;
      font-size: 1.4rem;
    }
  }

  overflow-x: auto;

  @include hover-mouse-only {
    @include webkit-scrollbar();
  }

  &._in-search {
    @include up(lg) {
      overflow-y: initial;
    }
  }

  &:not(._in-search) {
    @include up(md) {
      overflow-y: initial;
    }
  }

  &__inner {
    display: flex;
    column-gap: 0.4rem;
    row-gap: 0.6rem;
    background: var(--button-surface-surface);
    border: 0.3rem solid var(--button-surface-surface-outline);
    border-radius: 1.8rem;
    padding: 0.3rem;
    width: max-content;

    #{$root}._in-search & {
      @include up(lg) {
        flex-wrap: wrap;
        width: fit-content;
      }

      #{$root}__item {
        @include up(lg) {
          white-space: initial;
        }
      }
    }

    #{$root}:not(._in-search) & {
      @include up(md) {
        flex-wrap: wrap;
        width: fit-content;
      }

      #{$root}__item {
        @include up(md) {
          white-space: initial;
        }
      }
    }

    input {
      position: absolute;
      opacity: 0;
      appearance: none;

      @include focus {
        & ~ #{$root}__item {
          background: var(--button-state-bg06);
          color: var(--button-state-typo06);

          svg,
          span {
            opacity: 0.6;
          }
        }
      }
    }
  }

  &__item-count {
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 5rem;
    width: fit-content;
    font-weight: 400;
    line-height: 1;
    flex-shrink: 0;
    color: var(--typography-invert-primary);
    background: var(--button-surface-typo-surface);
    padding: 0.4rem 0.6rem 0;
    @include transition(all);
  }

  &__item {
    color: var(--button-surface-typo-surface);
    font-style: normal;
    font-weight: 700;
    font-size: 1.8rem;
    line-height: 1.3;
    border-radius: 1.2rem;
    background: transparent;
    display: flex;
    align-items: center;
    justify-content: center;
    width: fit-content;
    flex-shrink: 0;
    white-space: nowrap;
    cursor: pointer;
    user-select: none;
    @include transition(all);

    #{$root}._contrast-inactive-tabs & {
      @include alt-color-light {
        color: var(--button-default-typo01);

        span,
        svg {
          opacity: 1 !important;
        }
      }
    }

    svg,
    span {
      @include transition(opacity);
    }

    span {
      padding-top: 0.3rem;
    }

    svg {
      flex-shrink: 0;
    }

    &._active,
    #{$root} input:checked ~ & {
      background: var(--button-state-bg01);
      color: var(--button-default-typo01);
      cursor: default;

      #{$root}__item-count {
        background: var(--button-default-bg03);

        @include alt-color-dark {
          color: var(--button-default-dark-typo01);
        }
      }
    }

    @include focus;

    &:not(._active, :disabled, label),
    #{$root} input:not(:checked, :disabled) ~ & {
      @include hover {
        background: var(--button-state-bg06);
        color: var(--button-state-typo06);

        svg,
        span {
          @include alt-color-light {
            opacity: 0.6;
          }
        }
      }
    }

    &:disabled,
    #{$root} input:disabled ~ & {
      cursor: not-allowed;
    }

    &._size-s {
      @include size-s;

      @each $media in $medias {
        &-#{$media} {
          @include only($media) {
            @include size-s;
          }
        }
      }
    }

    &._size-m {
      @include size-m;

      @each $media in $medias {
        &-#{$media} {
          @include only($media) {
            @include size-m;
          }
        }
      }
    }

    &._size-l {
      @include size-l;

      @each $media in $medias {
        &-#{$media} {
          @include only($media) {
            @include size-l;
          }
        }
      }
    }
  }

  &._flex-wrap {
    overflow-y: initial;

    #{$root}__inner {
      flex-wrap: wrap;
      width: fit-content;
    }

    #{$root}__item {
      white-space: initial;
    }
  }
}
